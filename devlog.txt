16/04
Basic volumetric renderer.
Uses a fixed step size and a horrible integrator, but should be sufficient for MVP.
Density field is generated linearly in software, runs 64^3 samples in ~17ms.

19/04
CUDA integration.
The density field generator was moved to a CUDA kernel, but data is copied from device to host before being sent to OpenGL.
~8x perf improvement: runs 128^3 samples at ~17ms.

22/04
CUDA + OpenGL interop.
Density texture is now written to by CUDA kernel and read by OpenGL without copying.
Another ~8x perf improvement: (between 256-320)^3 samples in ~17ms.
Even for such a simple program this is a pretty big number!
I estimate that the fluid sim will be about 2 orders of magnitude more expensive than this basic operation, which means it should be able to run 128^3 at ~33ms. Goal set!

25/04
Velocity fields.
This implementes the double-buffering strategy I will be using for the velocity fields.
Because the density field also needs to be read and written in the same kernel, I'm unsure if it's better to use two GL textures or memcpy after each write.
This also adds a crude advection algorithm.

26/04
Debug output.
Currently it supports visualizing the fluid velocity data wtih adjustable cropping and threshold.
The debug output and renderer can be extended in future to help with specific bugs in the simulation.
It will need to be integrated with a GUI to be useful in more complex situations.
I spent a bit too long writing the voxel raytracer, but I'm very happy with it in the end! No branches except termination conditions.

28/04
Fix texture coordinate handling in simulation update.
This was causing a lot of weird bugs I chalked up to FP mishandling/precision, but really it was more like fencepost errors.
I've also clarified the treatment of velocities in the simulation: velcoities are stored in terms of texture space per second, and are scaled to world space on simulation input/output.
In future, when I set a fixed dt, I will change the internal unit to texture space per frame.
The advection is now MUCH more stable and more fluid-y, and should actually be sufficient for the MVP (the same first order method is actually used in one of the GPU Gems samples).

05/05
Imgui integration.
This adds a little menu which can configure some of the simualation / rendering parameters.
Should be extendable in future to accomodate further needs.

14/05
Initial pressure solver.
This seems to be the turning point where the fluid sim really starts to feel like a fluid!
As expected, the mutliple Jacobi iteration kernels are expensive: 16 iterations is about the best that still manages real-time on my hardware.
I'm not entirely confident in the correctness: every frame I set the pressure field to zero, which drastically improves the stability of the simulation.
I'm unsure about whether this is the correct handling of the pressure field, or if this means that the solver is incorrect, or if I just need to choose more reasonable initial conditions.
In any case, this is a big step!

06/06
CGRA409: Initial MacCormack method implementation.
Turns out to be very simple to implement.
The visual difference between this and the first-order method is not particularly noticable though.
This method also has obvious numerical instabilities: the common fix is to clamp the result to neighbouring cells, but this seems like it will cost a lot of texture accesses, which could probably be better spent on a stable integrator.
I will add some interaction features and experiment with this method more, and maybe try out other integrators.
